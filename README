   corelibgen: Generate stub libraries with CFI to unwind ELF corefiles
   --------------------------------------------------------------------

If you have a core dump from a system with different shared library
versions then your debugger is likely to show corrupted backtraces for
stacks calling into those libraries.  You can fix this by giving a copy
of the libraries to the debugger (set solib-search-path in gdb).
Unfortunately this may not be possible, typically if they are on
inaccessible customer systems.

Corelibgen provides an alternative by locating the DWARF Call Frame
Information (CFI) information required by the debugger in the core file
and creating stub libraries.

The only requirement is that the core files must be created including
the library segments from the process's memory image.  This is not the
default on Linux but

  echo 127 > /proc/<pid>/coredump_filter

or a programmatic equivalent will tell the kernel to dump all of the
memory mapping types for process <pid>.  See core(5) for more details.

I frequently use corelibgen to generate stub libraries containing CFI
that gdb can then use to obtain correct stack traces for a core file
without having the appropriate libraries.  It works for glibc and other
libraries including the example C program and asm library below.


Implementation
--------------

The CFI is present in the library in the process's memory image, because
C++ uses it to unwind when processing exceptions.  If these segments are
present in the core file then corelibgen can see them.

Identifying the CFI in a library file is easy: it is in the .eh_frame
section, whose offset is given in the ELF library header.  But that
header is not part of the process's memory image so is not available in
the core file; so instead corelibgen looks for ELF sections of type
PT_GNU_EH_FRAME.  (Luckily this section is required to implement C++
unwinding for exceptions so it tends to be present for modern
libraries.)

Another difficulty is that corelibgen has to guess appropriate names for
the stub libraries it creates.  It does that by looking for the string
"GLIBC_" in the library's ELF section of type PT_LOAD and walking
backwards until it finds a string beginning "lib" or "ld-linux.so".

It is enough, at least for gdb, to create a very minimal stub library of
the appropriate name with a header and sections .shstrtab and .eh_frame.


Limitations
-----------

1. I have only implemented this for 32-bit i386 Linux core files.  I
don't see why it shouldn't be possible for 64-bit core files but I have
yet to implement that.

2. This doesn't provide a stub (or genuine) libthread_db, so
thread-local variables can't be resolved by the debugger.

3. This has to be done manually.  It would be nice if gcc or lldb could
do it automatically!  (This would presumably be a bit like using
__jit_debug_descriptor for JIT/runtime-generated code in gdb.)

4. It is somewhat fragile, partly because it tries to guess the library
names.

5. This doesn't work for libraries that don't have CFI, in particular
really old library versions.

6. coredump_filter is not available on Linux kernels prior to version
2.6.28.

7. This only fixes the backtrace addresses and doesn't provide *symbols*
within the shared libraries.  So your backtrace will still give question
marks for the addresses in the shared libraries, but those addresses
will now be correct!

8. I have only tested this with gdb.  I haven't tested it on a very wide
variety of programs and libraries.


Example session
---------------

NB This was on a 32-bit i386 Linux.

[ubuntu tmp]$ gcc -o corelibgen corelibgen.c -Wall
[ubuntu tmp]$ gcc -Wl,-soname,library.so -shared -fPIC -o library.so 
library.S
[ubuntu tmp]$ gcc -ggdb -o frametest frametest.c library.so
[ubuntu tmp]$ echo 127 > /proc/self/coredump_filter
[ubuntu tmp]$ ulimit -c unlimited
[ubuntu tmp]$ LD_LIBRARY_PATH=. ./frametest
Trace/breakpoint trap (core dumped)
[ubuntu tmp]$ gdb frametest core --ex backtrace --ex quit
GNU gdb (GDB) 7.5-ubuntu
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later 
<http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show 
copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /tmp/tmp/frametest...done.
[New LWP 2856]
Core was generated by `./frametest'.
Program terminated with signal 5, Trace/breakpoint trap.
#0  0xb77d04fd in library_function () from ./library.so
#0  0xb77d04fd in library_function () from ./library.so
#1  0x08048564 in f2 (x=2, y=98 'b') at frametest.c:11
#2  0x0804858e in f1 (x=1, y=97 'a') at frametest.c:16
#3  0x080485ad in main () at frametest.c:21
[ubuntu tmp]$ rm library.so
[ubuntu tmp]$ gdb frametest core --ex backtrace --ex quit
GNU gdb (GDB) 7.5-ubuntu
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later 
<http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show 
copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /tmp/tmp/frametest...done.
[New LWP 2856]

warning: Could not load shared library symbols for ./library.so.
Do you need "set solib-search-path" or "set sysroot"?
Core was generated by `./frametest'.
Program terminated with signal 5, Trace/breakpoint trap.
#0  0xb77d04fd in ?? ()
#0  0xb77d04fd in ?? ()
[ubuntu tmp]$ ./corelibgen -f. core
Creating stub library libc.so.6
Creating stub library library.so
Creating stub library library.so
Failed to open file
Creating stub library libunknown_14
[ubuntu tmp]$ gdb --ex 'set solib-search-path lib' \
>     --ex 'set sysroot .' \
>     --ex 'file frametest' \
>     --ex 'core core' \
>     --ex backtrace \
>     --ex quit
GNU gdb (GDB) 7.5-ubuntu
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later 
<http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show 
copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Reading symbols from /tmp/tmp/frametest...done.
[New LWP 2856]
Core was generated by `./frametest'.
Program terminated with signal 5, Trace/breakpoint trap.
#0  0xb77d04fd in ?? ()
#0  0xb77d04fd in ?? ()
#1  0x08048564 in f2 (x=2, y=98 'b') at frametest.c:11
#2  0x0804858e in f1 (x=1, y=97 'a') at frametest.c:16
#3  0x080485ad in main () at frametest.c:21
